/**
 * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 Inc. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein is strictly forbidden, unless permitted by WSO2 in accordance with
 * the WSO2 Commercial License available at http://wso2.com/licenses. For specific
 * language governing the permissions and limitations under this license,
 * please see the license as well as any agreement you've entered into with
 * WSO2 governing the purchase of this software and any associated services.
 **/
@App:name("FraudStatusUpdaterApp")

@Source(type = 'http',
        receiver.url='http://<%= @analytics_hostname %>:8006/FraudStatusUpdaterApp/FraudStatusUpdaterStream',
        basic.auth.enabled='false',
        @map(type='json'))
define stream FraudStatusUpdaterStream (consentId string, analystId string, option int);
/*
option
0 = not fraudulent
1 = fraudulent
4 = fraudulent as the user is fraudulent
5 = fraudulent as the application is fraudulent
*/

--Store event data to database

@primaryKey('ID', 'TIMESTAMP')
@index('CONSENT_ID', 'TIMESTAMP')
@store(type='rdbms', datasource='OB_REPORTING_DB')
define table PAYMENTS_RAW_DATA(ID string,CONSENT_ID string,USER_ID string,TPP_ID string,CLIENT_ID string,CREDITOR_ACCOUNT_ID string,
                        DEBTOR_ACCOUNT_ID string,MULTI_AUTHORISATION bool,PAYMENT_TYPE string,CURRENCY string,
                        NO_OF_TRANSACTIONS string,LOCAL_INSTRUMENT string,AMOUNT string,PAYMENT_SUBMISSION_ID string,
                        TIMESTAMP long,TRA_DECISION bool, EXEMPTION string, IS_FRAUD int, MULTI_AUTH_USERS_COUNT int,API_SPEC_VERSION string, FRAUD_PARTY string, FRAUD_TYPE string);

@primaryKey('consentId')
@store(type='rdbms', datasource='OB_REPORTING_DB')
define table FraudulentTransactionData(consentId string, analystId string, timestamp long, status int);

@primaryKey('ID')
@store(type='rdbms', datasource='OB_REPORTING_DB')
define table GreyList(ID string, consentId string, ruleViolated string, fraudType string, userId string, applicationId string);

@info(name='updateTransactionHistoryTable')
from FraudStatusUpdaterStream [option == 1 OR option == 0]
select consentId, option as status
update PAYMENTS_RAW_DATA
set PAYMENTS_RAW_DATA.IS_FRAUD = status, PAYMENTS_RAW_DATA.FRAUD_PARTY = 'Not Provided', PAYMENTS_RAW_DATA.FRAUD_TYPE = 'Not Provided'
on PAYMENTS_RAW_DATA.CONSENT_ID == consentId;

@info(name='updateTransactionHistoryTableWhenUserBlacklisted')
from FraudStatusUpdaterStream [option == 4]
select consentId, option as status
update PAYMENTS_RAW_DATA
set PAYMENTS_RAW_DATA.IS_FRAUD = 1, PAYMENTS_RAW_DATA.FRAUD_PARTY = 'Fraudulent User', PAYMENTS_RAW_DATA.FRAUD_TYPE = 'Not Provided'
on PAYMENTS_RAW_DATA.CONSENT_ID == consentId;

@info(name='updateTransactionHistoryTableWhenApplicationBlacklisted')
from FraudStatusUpdaterStream [option == 5]
select consentId, option as status
update PAYMENTS_RAW_DATA
set PAYMENTS_RAW_DATA.IS_FRAUD = 1, PAYMENTS_RAW_DATA.FRAUD_PARTY = 'Fraudulent Application', PAYMENTS_RAW_DATA.FRAUD_TYPE = 'Not Provided'
on PAYMENTS_RAW_DATA.CONSENT_ID == consentId;

@info(name='insertToFraudulentTransactionDataTable')
from FraudStatusUpdaterStream [option == 1 OR option == 4 OR option == 5]
select consentId, analystId, eventTimestamp() as timestamp, 1 as status
update or insert into FraudulentTransactionData
set FraudulentTransactionData.timestamp = timestamp, FraudulentTransactionData.analystId = analystId, FraudulentTransactionData.status = status
on FraudulentTransactionData.consentId == consentId;

@info(name='updateFraudulentTransactionDataTable')
from FraudStatusUpdaterStream [option == 0]
select consentId, analystId, eventTimestamp() as timestamp, 0 as status
update or insert into FraudulentTransactionData
set FraudulentTransactionData.timestamp = timestamp, FraudulentTransactionData.analystId = analystId, FraudulentTransactionData.status = status
on FraudulentTransactionData.consentId == consentId;

@info(name='removeFromGreyList')
from FraudStatusUpdaterStream [option == 0]
select consentId
delete GreyList
on GreyList.consentId == consentId;


